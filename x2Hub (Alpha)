local player = game:GetService("Players").LocalPlayer local playerGui = player.PlayerGui local getHubVersion = "v1" local bindable = Instance.new("BindableFunction") local starterGUI = game:GetService("StarterGui") local ts = game:GetService("TweenService")  local games = {tonumber("4287812296")--[[x2Hub Game]],tonumber("280343502")--[[Pick A Side]],tonumber("1768079756")--[[just grass]],tonumber("1430993116")--[[literal baseplate]]}  for i,v in next, games do 	if game.GameId==v then 		if not playerGui:FindFirstChild("x2Hub") then 			starterGUI:SetCore("SendNotification", { 				Title = "x2Hub"; 				Text = "Do you want to execute x2Hub version: "..getHubVersion.."?"; 				Duration = 40; 				Callback = bindable; 				Button1 = "Execute"; 				Button2 = "no"; 			}) 		else 			starterGUI:SetCore("SendNotification", { 				Title = "Error"; 				Text = "Already Executed"; 				Duration = 10; 			}) 		end 	end	 end  --[[  hub made by x2Lazy  ]]  function bindable.OnInvoke(response) 	if response == "Execute" then  		starterGUI:SetCore("SendNotification", { 			Title = "Loading Hub"; 			Text="may take a while. . ."; 			Duration = 2; 		})  		wait(3)  		local UserInputService = game:GetService("UserInputService")  		if not playerGui:FindFirstChild("x2Hub") then 			local gui = Instance.new("ScreenGui") 			local moveableFrame = Instance.new("Frame") 			local mainFrame = Instance.new("Frame") 			local sideFrame = Instance.new("Frame") 			local nameOfHub = Instance.new("TextLabel") 			local gameLogo, gameLogoRoundify = Instance.new("ImageLabel"), Instance.new("UICorner") 			local homeButton = Instance.new("TextButton") 			local mainButton = Instance.new("TextButton") 			local homeFrame, homeFrameRoundify = Instance.new("Frame"), Instance.new("UICorner") 			local madeByText = Instance.new("TextLabel") 			local creatorText = Instance.new("TextLabel") 			local mainGameFrame, mainGameFrameRoundify = Instance.new("Frame"), Instance.new("UICorner") 			local feButton1 = Instance.new("TextButton") 			local resetBtn = Instance.new("TextButton") 
